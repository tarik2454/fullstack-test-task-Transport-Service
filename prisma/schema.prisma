// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  firstName     String
  lastName      String
  email         String      @unique
  password      String
  role          Role
  orders        Order[]     @relation("UserOrders")
  drivingOrders Order[]     @relation("DriverOrders")
  createdAt     DateTime    @default(now())
  warehouse     Warehouse[]
  client        Client[]

  @@map("users")
}

enum Role {
  MANAGER
  DRIVER
}

model Warehouse {
  id        String  @id @default(uuid())
  name      String
  address   String
  managerId String
  manager   User    @relation(fields: [managerId], references: [id])
  order     Order[]

  @@map("warehouses")
}

model Client {
  id        String  @id @default(uuid())
  name      String
  address   String
  phone     String
  managerId String
  manager   User    @relation(fields: [managerId], references: [id])
  order     Order[]

  @@map("clients")
}

model Order {
  id          String      @id @default(uuid())
  warehouseId String
  clientId    String
  managerId   String
  driverId    String?
  status      OrderStatus @default(NEW)

  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  client    Client    @relation(fields: [clientId], references: [id])
  manager   User      @relation("UserOrders", fields: [managerId], references: [id])
  driver    User?     @relation("DriverOrders", fields: [driverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

enum OrderStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  COMPLETED
}
